// Node.js란?
바로 JavaScript용 호스트 환경 즉, JavaScript용 런타임이다.
브라우저는 JavaScript 언어의 호스트 환경 중 하나이지만 유일한 환경은 아니다.
브라우저 JavaScript 엔진 중 가장 중요하고 널리 쓰이는 V8은 크롬에 탑재된 엔진인데 거기서 떨어져 나온게 Node.js이다.
만약 Node.js 코드를 쓰면 DOM과는 상호 작용할 수 없다. 브라우저 환경에서 JavaScript 코드를 실행하는 게 아니니깐
Node.js는 브라우저에서 실행되는게 아니기에 몇가지 API를 사용하지 못한다.(예를 들어 alret 등등 브라우저에서 사용할 수 있는 것들)

// Node.js을 사용하는 이유
DOM은 없지만 새로운 API를 쓸 수 있다. 예를 들어 브라우저에서는 보안 때문에 사용자의 시스템에 파일을
저장하거나 읽어오는 작업이 불가능하다. 하지만 Node에서는 가능하다. 사용자의 컴퓨터에서 작업을하는게아니라
서버로서 인터넷에 연결한 컴퓨터나 다른기기등 사용자가 선택한 컴퓨터에서 실행하기 때문에

// require() 함수
js파일을 모듈화하기 위해 사용하는 내장객체입니다. node.js에서 모듈은 파일구조입니다. 
앞장에서 사용했던 http 모듈을 예로 살펴보면 http 모듈은 특정폴더에 http.js 파일 또는 http 폴더에 index.js 파일로 존재하게 됩니다. 
즉 아래와 같은 구조를 가집니다.

require('모듈이름');
/ 모듈이름.js
/ 모듈이름 / index.js
위와 같이 require('모듈이름') 으로 모듈을 호출하면 먼저 '모듈이름.js' 파일이 경로상에 있는지 검색하고 없으면 '모듈이름'으로된 폴더를 검색합니다. 
그리고 해당 폴더 아래에 index.js 파일을 모듈로 가져와서 함수 반환값에 담아서 반환한다.


// use() 미들웨어
미들웨어의 종류

app에서 사용하는 미들웨어
내 어플리케이션 전반에서 사용하는 미들웨어다.

router에 사용하는 미들웨어
app에서 사용하는 미들웨어와 같지만 사용 범위가 라우터로 정해진다.
에러 처리 미들웨어
다른 미들웨어와 다르게 4개의 매개변수를 가진다.
에러를 처리하는 목적으로 만들어진 미들웨어다.
빌트 인 미들웨어
서드 파티 미들웨어
npm으로 설치하는 미들웨어들을 말한다.

req
클라이언트에서 오는 요청 정보가 담긴 객체
res
서버가 응답해주는 응답 정보가 담긴 객체
next
next 함수를 호출하면 현재 미들웨어에 이어서 다음 미들웨어를 실행합니다.

// 오류처리 next / throw
즉 동기식 동작만 하는 경우라면 throw를 사용해도 좋다
하지만 비동기식 동작에서는 next(error) 방식을 사용해야 한다.
